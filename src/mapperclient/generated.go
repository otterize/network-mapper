// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package mapperclient

import (
	"context"
	"time"

	"github.com/Khan/genqlient/graphql"
	"github.com/otterize/nilable"
)

type AWSOperation struct {
	Resource string                          `json:"resource"`
	Actions  []string                        `json:"actions"`
	SrcIp    nilable.Nilable[string]         `json:"srcIp"`
	Client   nilable.Nilable[NamespacedName] `json:"client"`
}

// GetResource returns AWSOperation.Resource, and is useful for accessing the field via an interface.
func (v *AWSOperation) GetResource() string { return v.Resource }

// GetActions returns AWSOperation.Actions, and is useful for accessing the field via an interface.
func (v *AWSOperation) GetActions() []string { return v.Actions }

// GetSrcIp returns AWSOperation.SrcIp, and is useful for accessing the field via an interface.
func (v *AWSOperation) GetSrcIp() nilable.Nilable[string] { return v.SrcIp }

// GetClient returns AWSOperation.Client, and is useful for accessing the field via an interface.
func (v *AWSOperation) GetClient() nilable.Nilable[NamespacedName] { return v.Client }

type AzureOperation struct {
	Scope           string   `json:"scope"`
	Actions         []string `json:"actions"`
	DataActions     []string `json:"dataActions"`
	ClientName      string   `json:"clientName"`
	ClientNamespace string   `json:"clientNamespace"`
}

// GetScope returns AzureOperation.Scope, and is useful for accessing the field via an interface.
func (v *AzureOperation) GetScope() string { return v.Scope }

// GetActions returns AzureOperation.Actions, and is useful for accessing the field via an interface.
func (v *AzureOperation) GetActions() []string { return v.Actions }

// GetDataActions returns AzureOperation.DataActions, and is useful for accessing the field via an interface.
func (v *AzureOperation) GetDataActions() []string { return v.DataActions }

// GetClientName returns AzureOperation.ClientName, and is useful for accessing the field via an interface.
func (v *AzureOperation) GetClientName() string { return v.ClientName }

// GetClientNamespace returns AzureOperation.ClientNamespace, and is useful for accessing the field via an interface.
func (v *AzureOperation) GetClientNamespace() string { return v.ClientNamespace }

type CaptureResults struct {
	Results []RecordedDestinationsForSrc `json:"results"`
}

// GetResults returns CaptureResults.Results, and is useful for accessing the field via an interface.
func (v *CaptureResults) GetResults() []RecordedDestinationsForSrc { return v.Results }

type CaptureTCPResults struct {
	Results []RecordedDestinationsForSrc `json:"results"`
}

// GetResults returns CaptureTCPResults.Results, and is useful for accessing the field via an interface.
func (v *CaptureTCPResults) GetResults() []RecordedDestinationsForSrc { return v.Results }

type Destination struct {
	Destination     string                  `json:"destination"`
	DestinationIP   nilable.Nilable[string] `json:"destinationIP"`
	DestinationPort nilable.Nilable[int]    `json:"destinationPort"`
	TTL             nilable.Nilable[int]    `json:"TTL"`
	LastSeen        time.Time               `json:"lastSeen"`
}

// GetDestination returns Destination.Destination, and is useful for accessing the field via an interface.
func (v *Destination) GetDestination() string { return v.Destination }

// GetDestinationIP returns Destination.DestinationIP, and is useful for accessing the field via an interface.
func (v *Destination) GetDestinationIP() nilable.Nilable[string] { return v.DestinationIP }

// GetDestinationPort returns Destination.DestinationPort, and is useful for accessing the field via an interface.
func (v *Destination) GetDestinationPort() nilable.Nilable[int] { return v.DestinationPort }

// GetTTL returns Destination.TTL, and is useful for accessing the field via an interface.
func (v *Destination) GetTTL() nilable.Nilable[int] { return v.TTL }

// GetLastSeen returns Destination.LastSeen, and is useful for accessing the field via an interface.
func (v *Destination) GetLastSeen() time.Time { return v.LastSeen }

// HealthResponse is returned by Health on success.
type HealthResponse struct {
	Health bool `json:"health"`
}

// GetHealth returns HealthResponse.Health, and is useful for accessing the field via an interface.
func (v *HealthResponse) GetHealth() bool { return v.Health }

type KafkaMapperResult struct {
	SrcIp           string    `json:"srcIp"`
	ServerPodName   string    `json:"serverPodName"`
	ServerNamespace string    `json:"serverNamespace"`
	Topic           string    `json:"topic"`
	Operation       string    `json:"operation"`
	LastSeen        time.Time `json:"lastSeen"`
}

// GetSrcIp returns KafkaMapperResult.SrcIp, and is useful for accessing the field via an interface.
func (v *KafkaMapperResult) GetSrcIp() string { return v.SrcIp }

// GetServerPodName returns KafkaMapperResult.ServerPodName, and is useful for accessing the field via an interface.
func (v *KafkaMapperResult) GetServerPodName() string { return v.ServerPodName }

// GetServerNamespace returns KafkaMapperResult.ServerNamespace, and is useful for accessing the field via an interface.
func (v *KafkaMapperResult) GetServerNamespace() string { return v.ServerNamespace }

// GetTopic returns KafkaMapperResult.Topic, and is useful for accessing the field via an interface.
func (v *KafkaMapperResult) GetTopic() string { return v.Topic }

// GetOperation returns KafkaMapperResult.Operation, and is useful for accessing the field via an interface.
func (v *KafkaMapperResult) GetOperation() string { return v.Operation }

// GetLastSeen returns KafkaMapperResult.LastSeen, and is useful for accessing the field via an interface.
func (v *KafkaMapperResult) GetLastSeen() time.Time { return v.LastSeen }

type KafkaMapperResults struct {
	Results []KafkaMapperResult `json:"results"`
}

// GetResults returns KafkaMapperResults.Results, and is useful for accessing the field via an interface.
func (v *KafkaMapperResults) GetResults() []KafkaMapperResult { return v.Results }

type NamespacedName struct {
	Name      string `json:"name"`
	Namespace string `json:"namespace"`
}

// GetName returns NamespacedName.Name, and is useful for accessing the field via an interface.
func (v *NamespacedName) GetName() string { return v.Name }

// GetNamespace returns NamespacedName.Namespace, and is useful for accessing the field via an interface.
func (v *NamespacedName) GetNamespace() string { return v.Namespace }

type RecordedDestinationsForSrc struct {
	SrcIp        string        `json:"srcIp"`
	SrcHostname  string        `json:"srcHostname"`
	Destinations []Destination `json:"destinations"`
}

// GetSrcIp returns RecordedDestinationsForSrc.SrcIp, and is useful for accessing the field via an interface.
func (v *RecordedDestinationsForSrc) GetSrcIp() string { return v.SrcIp }

// GetSrcHostname returns RecordedDestinationsForSrc.SrcHostname, and is useful for accessing the field via an interface.
func (v *RecordedDestinationsForSrc) GetSrcHostname() string { return v.SrcHostname }

// GetDestinations returns RecordedDestinationsForSrc.Destinations, and is useful for accessing the field via an interface.
func (v *RecordedDestinationsForSrc) GetDestinations() []Destination { return v.Destinations }

type SocketScanResults struct {
	Results []RecordedDestinationsForSrc `json:"results"`
}

// GetResults returns SocketScanResults.Results, and is useful for accessing the field via an interface.
func (v *SocketScanResults) GetResults() []RecordedDestinationsForSrc { return v.Results }

// __reportAWSOperationInput is used internally by genqlient
type __reportAWSOperationInput struct {
	Operation []AWSOperation `json:"operation"`
}

// GetOperation returns __reportAWSOperationInput.Operation, and is useful for accessing the field via an interface.
func (v *__reportAWSOperationInput) GetOperation() []AWSOperation { return v.Operation }

// __reportAzureOperationInput is used internally by genqlient
type __reportAzureOperationInput struct {
	Operation []AzureOperation `json:"operation"`
}

// GetOperation returns __reportAzureOperationInput.Operation, and is useful for accessing the field via an interface.
func (v *__reportAzureOperationInput) GetOperation() []AzureOperation { return v.Operation }

// __reportCaptureResultsInput is used internally by genqlient
type __reportCaptureResultsInput struct {
	Results CaptureResults `json:"results"`
}

// GetResults returns __reportCaptureResultsInput.Results, and is useful for accessing the field via an interface.
func (v *__reportCaptureResultsInput) GetResults() CaptureResults { return v.Results }

// __reportKafkaMapperResultsInput is used internally by genqlient
type __reportKafkaMapperResultsInput struct {
	Results KafkaMapperResults `json:"results"`
}

// GetResults returns __reportKafkaMapperResultsInput.Results, and is useful for accessing the field via an interface.
func (v *__reportKafkaMapperResultsInput) GetResults() KafkaMapperResults { return v.Results }

// __reportSocketScanResultsInput is used internally by genqlient
type __reportSocketScanResultsInput struct {
	Results SocketScanResults `json:"results"`
}

// GetResults returns __reportSocketScanResultsInput.Results, and is useful for accessing the field via an interface.
func (v *__reportSocketScanResultsInput) GetResults() SocketScanResults { return v.Results }

// __reportTCPCaptureResultsInput is used internally by genqlient
type __reportTCPCaptureResultsInput struct {
	Results CaptureTCPResults `json:"results"`
}

// GetResults returns __reportTCPCaptureResultsInput.Results, and is useful for accessing the field via an interface.
func (v *__reportTCPCaptureResultsInput) GetResults() CaptureTCPResults { return v.Results }

// reportAWSOperationResponse is returned by reportAWSOperation on success.
type reportAWSOperationResponse struct {
	ReportAWSOperation bool `json:"reportAWSOperation"`
}

// GetReportAWSOperation returns reportAWSOperationResponse.ReportAWSOperation, and is useful for accessing the field via an interface.
func (v *reportAWSOperationResponse) GetReportAWSOperation() bool { return v.ReportAWSOperation }

// reportAzureOperationResponse is returned by reportAzureOperation on success.
type reportAzureOperationResponse struct {
	ReportAzureOperation bool `json:"reportAzureOperation"`
}

// GetReportAzureOperation returns reportAzureOperationResponse.ReportAzureOperation, and is useful for accessing the field via an interface.
func (v *reportAzureOperationResponse) GetReportAzureOperation() bool { return v.ReportAzureOperation }

// reportCaptureResultsResponse is returned by reportCaptureResults on success.
type reportCaptureResultsResponse struct {
	ReportCaptureResults bool `json:"reportCaptureResults"`
}

// GetReportCaptureResults returns reportCaptureResultsResponse.ReportCaptureResults, and is useful for accessing the field via an interface.
func (v *reportCaptureResultsResponse) GetReportCaptureResults() bool { return v.ReportCaptureResults }

// reportKafkaMapperResultsResponse is returned by reportKafkaMapperResults on success.
type reportKafkaMapperResultsResponse struct {
	ReportKafkaMapperResults bool `json:"reportKafkaMapperResults"`
}

// GetReportKafkaMapperResults returns reportKafkaMapperResultsResponse.ReportKafkaMapperResults, and is useful for accessing the field via an interface.
func (v *reportKafkaMapperResultsResponse) GetReportKafkaMapperResults() bool {
	return v.ReportKafkaMapperResults
}

// reportSocketScanResultsResponse is returned by reportSocketScanResults on success.
type reportSocketScanResultsResponse struct {
	ReportSocketScanResults bool `json:"reportSocketScanResults"`
}

// GetReportSocketScanResults returns reportSocketScanResultsResponse.ReportSocketScanResults, and is useful for accessing the field via an interface.
func (v *reportSocketScanResultsResponse) GetReportSocketScanResults() bool {
	return v.ReportSocketScanResults
}

// reportTCPCaptureResultsResponse is returned by reportTCPCaptureResults on success.
type reportTCPCaptureResultsResponse struct {
	ReportTCPCaptureResults bool `json:"reportTCPCaptureResults"`
}

// GetReportTCPCaptureResults returns reportTCPCaptureResultsResponse.ReportTCPCaptureResults, and is useful for accessing the field via an interface.
func (v *reportTCPCaptureResultsResponse) GetReportTCPCaptureResults() bool {
	return v.ReportTCPCaptureResults
}

// The query or mutation executed by Health.
const Health_Operation = `
query Health {
	health
}
`

func Health(
	ctx_ context.Context,
	client_ graphql.Client,
) (*HealthResponse, error) {
	req_ := &graphql.Request{
		OpName: "Health",
		Query:  Health_Operation,
	}
	var err_ error

	var data_ HealthResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by reportAWSOperation.
const reportAWSOperation_Operation = `
mutation reportAWSOperation ($operation: [AWSOperation!]!) {
	reportAWSOperation(operation: $operation)
}
`

func reportAWSOperation(
	ctx_ context.Context,
	client_ graphql.Client,
	operation []AWSOperation,
) (*reportAWSOperationResponse, error) {
	req_ := &graphql.Request{
		OpName: "reportAWSOperation",
		Query:  reportAWSOperation_Operation,
		Variables: &__reportAWSOperationInput{
			Operation: operation,
		},
	}
	var err_ error

	var data_ reportAWSOperationResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by reportAzureOperation.
const reportAzureOperation_Operation = `
mutation reportAzureOperation ($operation: [AzureOperation!]!) {
	reportAzureOperation(operation: $operation)
}
`

func reportAzureOperation(
	ctx_ context.Context,
	client_ graphql.Client,
	operation []AzureOperation,
) (*reportAzureOperationResponse, error) {
	req_ := &graphql.Request{
		OpName: "reportAzureOperation",
		Query:  reportAzureOperation_Operation,
		Variables: &__reportAzureOperationInput{
			Operation: operation,
		},
	}
	var err_ error

	var data_ reportAzureOperationResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by reportCaptureResults.
const reportCaptureResults_Operation = `
mutation reportCaptureResults ($results: CaptureResults!) {
	reportCaptureResults(results: $results)
}
`

func reportCaptureResults(
	ctx_ context.Context,
	client_ graphql.Client,
	results CaptureResults,
) (*reportCaptureResultsResponse, error) {
	req_ := &graphql.Request{
		OpName: "reportCaptureResults",
		Query:  reportCaptureResults_Operation,
		Variables: &__reportCaptureResultsInput{
			Results: results,
		},
	}
	var err_ error

	var data_ reportCaptureResultsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by reportKafkaMapperResults.
const reportKafkaMapperResults_Operation = `
mutation reportKafkaMapperResults ($results: KafkaMapperResults!) {
	reportKafkaMapperResults(results: $results)
}
`

func reportKafkaMapperResults(
	ctx_ context.Context,
	client_ graphql.Client,
	results KafkaMapperResults,
) (*reportKafkaMapperResultsResponse, error) {
	req_ := &graphql.Request{
		OpName: "reportKafkaMapperResults",
		Query:  reportKafkaMapperResults_Operation,
		Variables: &__reportKafkaMapperResultsInput{
			Results: results,
		},
	}
	var err_ error

	var data_ reportKafkaMapperResultsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by reportSocketScanResults.
const reportSocketScanResults_Operation = `
mutation reportSocketScanResults ($results: SocketScanResults!) {
	reportSocketScanResults(results: $results)
}
`

func reportSocketScanResults(
	ctx_ context.Context,
	client_ graphql.Client,
	results SocketScanResults,
) (*reportSocketScanResultsResponse, error) {
	req_ := &graphql.Request{
		OpName: "reportSocketScanResults",
		Query:  reportSocketScanResults_Operation,
		Variables: &__reportSocketScanResultsInput{
			Results: results,
		},
	}
	var err_ error

	var data_ reportSocketScanResultsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by reportTCPCaptureResults.
const reportTCPCaptureResults_Operation = `
mutation reportTCPCaptureResults ($results: CaptureTCPResults!) {
	reportTCPCaptureResults(results: $results)
}
`

func reportTCPCaptureResults(
	ctx_ context.Context,
	client_ graphql.Client,
	results CaptureTCPResults,
) (*reportTCPCaptureResultsResponse, error) {
	req_ := &graphql.Request{
		OpName: "reportTCPCaptureResults",
		Query:  reportTCPCaptureResults_Operation,
		Variables: &__reportTCPCaptureResultsInput{
			Results: results,
		},
	}
	var err_ error

	var data_ reportTCPCaptureResultsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}
