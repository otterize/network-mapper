# @genqlient(pointer: true)
mutation ReportDiscoveredIntents($intents: [DiscoveredIntentInput!]!) {
    reportDiscoveredIntents(intents: $intents)
}

mutation ReportExternalTrafficDiscoveredIntents($intents: [ExternalTrafficDiscoveredIntentInput!]!) {
    reportExternalTrafficDiscoveredIntents(intents: $intents)
}

mutation ReportComponentStatus($component: ComponentType!) {
    reportIntegrationComponentStatus(component: $component)
}

mutation ReportIncomingTrafficDiscoveredIntents($intents: [IncomingTrafficDiscoveredIntentInput!]!) {
    reportIncomingTrafficDiscoveredIntents(intents: $intents)
}

mutation ReportK8sServices($namespace: String!, $services: [K8sServiceInput!]!) {
    reportK8sServices(namespace: $namespace, services: $services)
}

mutation ReportK8sIngresses($namespace: String!, $ingresses: [K8sIngressInput!]!) {
    reportK8sIngresses(namespace: $namespace, ingresses: $ingresses)
}

mutation ReportK8sResourceEligibleForMetricsCollection($namespace: String!, $reason: EligibleForMetricsCollectionReason!, $resources: [K8sResourceEligibleForMetricsCollectionInput!]!) {
    reportK8sResourceEligibleForMetricsCollection(namespace: $namespace, reason: $reason, resources: $resources)
}

mutation ReportTrafficLevels(
    $trafficLevels: [TrafficLevelInput!]!
) {
    reportTrafficLevels(trafficLevels: $trafficLevels)
}

mutation ReportNamespaceLabels($name: String!, $labels: [LabelInput!]!) {
    reportNamespaceLabels(name: $name, labels: $labels)
}

mutation ReportWorkloadsMetadata($workloadsLabels: [ReportServiceMetadataInput!]!) {
    reportServicesMetadata(servicesMeta: $workloadsLabels)
}

mutation ReportNetworkPolicies($namespace: String!, $networkPolicies: [NetworkPolicyInput!]!) {
    reportNetworkPolicies(namespace: $namespace, networkPolicies: $networkPolicies)
}

mutation ReportCiliumClusterWideNetworkPolicies($networkPolicies: [NetworkPolicyInput!]!) {
    reportNetworkPolicies(networkPolicies: $networkPolicies)
}

mutation ReportK8sWebhookServices($services: [K8sWebhookServiceInput!]!) {
    reportK8sWebhookServices(services: $services)
}