// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package test_gql_client

import (
	"context"
	"time"

	"github.com/Khan/genqlient/graphql"
	"github.com/otterize/nilable"
)

type CaptureResults struct {
	Results []RecordedDestinationsForSrc `json:"results"`
}

// GetResults returns CaptureResults.Results, and is useful for accessing the field via an interface.
func (v *CaptureResults) GetResults() []RecordedDestinationsForSrc { return v.Results }

type CaptureTCPResults struct {
	Results []RecordedDestinationsForSrc `json:"results"`
}

// GetResults returns CaptureTCPResults.Results, and is useful for accessing the field via an interface.
func (v *CaptureTCPResults) GetResults() []RecordedDestinationsForSrc { return v.Results }

type Destination struct {
	Destination     string                  `json:"destination"`
	DestinationIP   nilable.Nilable[string] `json:"destinationIP"`
	DestinationPort nilable.Nilable[int]    `json:"destinationPort"`
	TTL             nilable.Nilable[int]    `json:"TTL"`
	LastSeen        time.Time               `json:"lastSeen"`
}

// GetDestination returns Destination.Destination, and is useful for accessing the field via an interface.
func (v *Destination) GetDestination() string { return v.Destination }

// GetDestinationIP returns Destination.DestinationIP, and is useful for accessing the field via an interface.
func (v *Destination) GetDestinationIP() nilable.Nilable[string] { return v.DestinationIP }

// GetDestinationPort returns Destination.DestinationPort, and is useful for accessing the field via an interface.
func (v *Destination) GetDestinationPort() nilable.Nilable[int] { return v.DestinationPort }

// GetTTL returns Destination.TTL, and is useful for accessing the field via an interface.
func (v *Destination) GetTTL() nilable.Nilable[int] { return v.TTL }

// GetLastSeen returns Destination.LastSeen, and is useful for accessing the field via an interface.
func (v *Destination) GetLastSeen() time.Time { return v.LastSeen }

// IntentsIntentsIntent includes the requested fields of the GraphQL type Intent.
type IntentsIntentsIntent struct {
	Client IntentsIntentsIntentClientOtterizeServiceIdentity `json:"client"`
	Server IntentsIntentsIntentServerOtterizeServiceIdentity `json:"server"`
}

// GetClient returns IntentsIntentsIntent.Client, and is useful for accessing the field via an interface.
func (v *IntentsIntentsIntent) GetClient() IntentsIntentsIntentClientOtterizeServiceIdentity {
	return v.Client
}

// GetServer returns IntentsIntentsIntent.Server, and is useful for accessing the field via an interface.
func (v *IntentsIntentsIntent) GetServer() IntentsIntentsIntentServerOtterizeServiceIdentity {
	return v.Server
}

// IntentsIntentsIntentClientOtterizeServiceIdentity includes the requested fields of the GraphQL type OtterizeServiceIdentity.
type IntentsIntentsIntentClientOtterizeServiceIdentity struct {
	Name      string `json:"name"`
	Namespace string `json:"namespace"`
	// If the service identity was resolved from a pod owner, the GroupVersionKind of the pod owner.
	PodOwnerKind nilable.Nilable[IntentsIntentsIntentClientOtterizeServiceIdentityPodOwnerKindGroupVersionKind] `json:"podOwnerKind"`
}

// GetName returns IntentsIntentsIntentClientOtterizeServiceIdentity.Name, and is useful for accessing the field via an interface.
func (v *IntentsIntentsIntentClientOtterizeServiceIdentity) GetName() string { return v.Name }

// GetNamespace returns IntentsIntentsIntentClientOtterizeServiceIdentity.Namespace, and is useful for accessing the field via an interface.
func (v *IntentsIntentsIntentClientOtterizeServiceIdentity) GetNamespace() string { return v.Namespace }

// GetPodOwnerKind returns IntentsIntentsIntentClientOtterizeServiceIdentity.PodOwnerKind, and is useful for accessing the field via an interface.
func (v *IntentsIntentsIntentClientOtterizeServiceIdentity) GetPodOwnerKind() nilable.Nilable[IntentsIntentsIntentClientOtterizeServiceIdentityPodOwnerKindGroupVersionKind] {
	return v.PodOwnerKind
}

// IntentsIntentsIntentClientOtterizeServiceIdentityPodOwnerKindGroupVersionKind includes the requested fields of the GraphQL type GroupVersionKind.
type IntentsIntentsIntentClientOtterizeServiceIdentityPodOwnerKindGroupVersionKind struct {
	Group   nilable.Nilable[string] `json:"group"`
	Kind    string                  `json:"kind"`
	Version string                  `json:"version"`
}

// GetGroup returns IntentsIntentsIntentClientOtterizeServiceIdentityPodOwnerKindGroupVersionKind.Group, and is useful for accessing the field via an interface.
func (v *IntentsIntentsIntentClientOtterizeServiceIdentityPodOwnerKindGroupVersionKind) GetGroup() nilable.Nilable[string] {
	return v.Group
}

// GetKind returns IntentsIntentsIntentClientOtterizeServiceIdentityPodOwnerKindGroupVersionKind.Kind, and is useful for accessing the field via an interface.
func (v *IntentsIntentsIntentClientOtterizeServiceIdentityPodOwnerKindGroupVersionKind) GetKind() string {
	return v.Kind
}

// GetVersion returns IntentsIntentsIntentClientOtterizeServiceIdentityPodOwnerKindGroupVersionKind.Version, and is useful for accessing the field via an interface.
func (v *IntentsIntentsIntentClientOtterizeServiceIdentityPodOwnerKindGroupVersionKind) GetVersion() string {
	return v.Version
}

// IntentsIntentsIntentServerOtterizeServiceIdentity includes the requested fields of the GraphQL type OtterizeServiceIdentity.
type IntentsIntentsIntentServerOtterizeServiceIdentity struct {
	Name      string `json:"name"`
	Namespace string `json:"namespace"`
	// If the service identity was resolved from a pod owner, the GroupVersionKind of the pod owner.
	PodOwnerKind nilable.Nilable[IntentsIntentsIntentServerOtterizeServiceIdentityPodOwnerKindGroupVersionKind] `json:"podOwnerKind"`
	// If the service identity was resolved from a Kubernetes service, its name.
	KubernetesService nilable.Nilable[string] `json:"kubernetesService"`
}

// GetName returns IntentsIntentsIntentServerOtterizeServiceIdentity.Name, and is useful for accessing the field via an interface.
func (v *IntentsIntentsIntentServerOtterizeServiceIdentity) GetName() string { return v.Name }

// GetNamespace returns IntentsIntentsIntentServerOtterizeServiceIdentity.Namespace, and is useful for accessing the field via an interface.
func (v *IntentsIntentsIntentServerOtterizeServiceIdentity) GetNamespace() string { return v.Namespace }

// GetPodOwnerKind returns IntentsIntentsIntentServerOtterizeServiceIdentity.PodOwnerKind, and is useful for accessing the field via an interface.
func (v *IntentsIntentsIntentServerOtterizeServiceIdentity) GetPodOwnerKind() nilable.Nilable[IntentsIntentsIntentServerOtterizeServiceIdentityPodOwnerKindGroupVersionKind] {
	return v.PodOwnerKind
}

// GetKubernetesService returns IntentsIntentsIntentServerOtterizeServiceIdentity.KubernetesService, and is useful for accessing the field via an interface.
func (v *IntentsIntentsIntentServerOtterizeServiceIdentity) GetKubernetesService() nilable.Nilable[string] {
	return v.KubernetesService
}

// IntentsIntentsIntentServerOtterizeServiceIdentityPodOwnerKindGroupVersionKind includes the requested fields of the GraphQL type GroupVersionKind.
type IntentsIntentsIntentServerOtterizeServiceIdentityPodOwnerKindGroupVersionKind struct {
	Group   nilable.Nilable[string] `json:"group"`
	Kind    string                  `json:"kind"`
	Version string                  `json:"version"`
}

// GetGroup returns IntentsIntentsIntentServerOtterizeServiceIdentityPodOwnerKindGroupVersionKind.Group, and is useful for accessing the field via an interface.
func (v *IntentsIntentsIntentServerOtterizeServiceIdentityPodOwnerKindGroupVersionKind) GetGroup() nilable.Nilable[string] {
	return v.Group
}

// GetKind returns IntentsIntentsIntentServerOtterizeServiceIdentityPodOwnerKindGroupVersionKind.Kind, and is useful for accessing the field via an interface.
func (v *IntentsIntentsIntentServerOtterizeServiceIdentityPodOwnerKindGroupVersionKind) GetKind() string {
	return v.Kind
}

// GetVersion returns IntentsIntentsIntentServerOtterizeServiceIdentityPodOwnerKindGroupVersionKind.Version, and is useful for accessing the field via an interface.
func (v *IntentsIntentsIntentServerOtterizeServiceIdentityPodOwnerKindGroupVersionKind) GetVersion() string {
	return v.Version
}

// IntentsResponse is returned by Intents on success.
type IntentsResponse struct {
	// Query intents list.
	// namespaces: Namespaces filter.
	// includeLabels: Labels to include in the response. Ignored if includeAllLabels is specified.
	// excludeLabels: Labels to exclude from the response. Ignored if includeAllLabels is specified.
	// includeAllLabels: Return all labels for the pod in the response.
	Intents []IntentsIntentsIntent `json:"intents"`
}

// GetIntents returns IntentsResponse.Intents, and is useful for accessing the field via an interface.
func (v *IntentsResponse) GetIntents() []IntentsIntentsIntent { return v.Intents }

type RecordedDestinationsForSrc struct {
	SrcIp        string        `json:"srcIp"`
	SrcHostname  string        `json:"srcHostname"`
	Destinations []Destination `json:"destinations"`
}

// GetSrcIp returns RecordedDestinationsForSrc.SrcIp, and is useful for accessing the field via an interface.
func (v *RecordedDestinationsForSrc) GetSrcIp() string { return v.SrcIp }

// GetSrcHostname returns RecordedDestinationsForSrc.SrcHostname, and is useful for accessing the field via an interface.
func (v *RecordedDestinationsForSrc) GetSrcHostname() string { return v.SrcHostname }

// GetDestinations returns RecordedDestinationsForSrc.Destinations, and is useful for accessing the field via an interface.
func (v *RecordedDestinationsForSrc) GetDestinations() []Destination { return v.Destinations }

// ReportCaptureResultsResponse is returned by ReportCaptureResults on success.
type ReportCaptureResultsResponse struct {
	ReportCaptureResults bool `json:"reportCaptureResults"`
}

// GetReportCaptureResults returns ReportCaptureResultsResponse.ReportCaptureResults, and is useful for accessing the field via an interface.
func (v *ReportCaptureResultsResponse) GetReportCaptureResults() bool { return v.ReportCaptureResults }

// ReportSocketScanResultsResponse is returned by ReportSocketScanResults on success.
type ReportSocketScanResultsResponse struct {
	ReportSocketScanResults bool `json:"reportSocketScanResults"`
}

// GetReportSocketScanResults returns ReportSocketScanResultsResponse.ReportSocketScanResults, and is useful for accessing the field via an interface.
func (v *ReportSocketScanResultsResponse) GetReportSocketScanResults() bool {
	return v.ReportSocketScanResults
}

// ReportTCPCaptureResultsResponse is returned by ReportTCPCaptureResults on success.
type ReportTCPCaptureResultsResponse struct {
	ReportTCPCaptureResults bool `json:"reportTCPCaptureResults"`
}

// GetReportTCPCaptureResults returns ReportTCPCaptureResultsResponse.ReportTCPCaptureResults, and is useful for accessing the field via an interface.
func (v *ReportTCPCaptureResultsResponse) GetReportTCPCaptureResults() bool {
	return v.ReportTCPCaptureResults
}

type ServerFilter struct {
	Name      string `json:"name"`
	Namespace string `json:"namespace"`
}

// GetName returns ServerFilter.Name, and is useful for accessing the field via an interface.
func (v *ServerFilter) GetName() string { return v.Name }

// GetNamespace returns ServerFilter.Namespace, and is useful for accessing the field via an interface.
func (v *ServerFilter) GetNamespace() string { return v.Namespace }

// ServiceIntentsResponse is returned by ServiceIntents on success.
type ServiceIntentsResponse struct {
	// Kept for backwards compatibility with CLI -
	// query intents as (source+destinations) pairs, without any additional intent info.
	// namespaces: Namespaces filter.
	// includeLabels: Labels to include in the response. Ignored if includeAllLabels is specified.
	// includeAllLabels: Return all labels for the pod in the response.
	ServiceIntents []ServiceIntentsServiceIntents `json:"serviceIntents"`
}

// GetServiceIntents returns ServiceIntentsResponse.ServiceIntents, and is useful for accessing the field via an interface.
func (v *ServiceIntentsResponse) GetServiceIntents() []ServiceIntentsServiceIntents {
	return v.ServiceIntents
}

// ServiceIntentsServiceIntents includes the requested fields of the GraphQL type ServiceIntents.
type ServiceIntentsServiceIntents struct {
	Client  ServiceIntentsServiceIntentsClientOtterizeServiceIdentity    `json:"client"`
	Intents []ServiceIntentsServiceIntentsIntentsOtterizeServiceIdentity `json:"intents"`
}

// GetClient returns ServiceIntentsServiceIntents.Client, and is useful for accessing the field via an interface.
func (v *ServiceIntentsServiceIntents) GetClient() ServiceIntentsServiceIntentsClientOtterizeServiceIdentity {
	return v.Client
}

// GetIntents returns ServiceIntentsServiceIntents.Intents, and is useful for accessing the field via an interface.
func (v *ServiceIntentsServiceIntents) GetIntents() []ServiceIntentsServiceIntentsIntentsOtterizeServiceIdentity {
	return v.Intents
}

// ServiceIntentsServiceIntentsClientOtterizeServiceIdentity includes the requested fields of the GraphQL type OtterizeServiceIdentity.
type ServiceIntentsServiceIntentsClientOtterizeServiceIdentity struct {
	Name      string `json:"name"`
	Namespace string `json:"namespace"`
	// If the service identity was resolved from a pod owner, the GroupVersionKind of the pod owner.
	PodOwnerKind nilable.Nilable[ServiceIntentsServiceIntentsClientOtterizeServiceIdentityPodOwnerKindGroupVersionKind] `json:"podOwnerKind"`
}

// GetName returns ServiceIntentsServiceIntentsClientOtterizeServiceIdentity.Name, and is useful for accessing the field via an interface.
func (v *ServiceIntentsServiceIntentsClientOtterizeServiceIdentity) GetName() string { return v.Name }

// GetNamespace returns ServiceIntentsServiceIntentsClientOtterizeServiceIdentity.Namespace, and is useful for accessing the field via an interface.
func (v *ServiceIntentsServiceIntentsClientOtterizeServiceIdentity) GetNamespace() string {
	return v.Namespace
}

// GetPodOwnerKind returns ServiceIntentsServiceIntentsClientOtterizeServiceIdentity.PodOwnerKind, and is useful for accessing the field via an interface.
func (v *ServiceIntentsServiceIntentsClientOtterizeServiceIdentity) GetPodOwnerKind() nilable.Nilable[ServiceIntentsServiceIntentsClientOtterizeServiceIdentityPodOwnerKindGroupVersionKind] {
	return v.PodOwnerKind
}

// ServiceIntentsServiceIntentsClientOtterizeServiceIdentityPodOwnerKindGroupVersionKind includes the requested fields of the GraphQL type GroupVersionKind.
type ServiceIntentsServiceIntentsClientOtterizeServiceIdentityPodOwnerKindGroupVersionKind struct {
	Group   nilable.Nilable[string] `json:"group"`
	Kind    string                  `json:"kind"`
	Version string                  `json:"version"`
}

// GetGroup returns ServiceIntentsServiceIntentsClientOtterizeServiceIdentityPodOwnerKindGroupVersionKind.Group, and is useful for accessing the field via an interface.
func (v *ServiceIntentsServiceIntentsClientOtterizeServiceIdentityPodOwnerKindGroupVersionKind) GetGroup() nilable.Nilable[string] {
	return v.Group
}

// GetKind returns ServiceIntentsServiceIntentsClientOtterizeServiceIdentityPodOwnerKindGroupVersionKind.Kind, and is useful for accessing the field via an interface.
func (v *ServiceIntentsServiceIntentsClientOtterizeServiceIdentityPodOwnerKindGroupVersionKind) GetKind() string {
	return v.Kind
}

// GetVersion returns ServiceIntentsServiceIntentsClientOtterizeServiceIdentityPodOwnerKindGroupVersionKind.Version, and is useful for accessing the field via an interface.
func (v *ServiceIntentsServiceIntentsClientOtterizeServiceIdentityPodOwnerKindGroupVersionKind) GetVersion() string {
	return v.Version
}

// ServiceIntentsServiceIntentsIntentsOtterizeServiceIdentity includes the requested fields of the GraphQL type OtterizeServiceIdentity.
type ServiceIntentsServiceIntentsIntentsOtterizeServiceIdentity struct {
	Name      string `json:"name"`
	Namespace string `json:"namespace"`
	// If the service identity was resolved from a Kubernetes service, its name.
	KubernetesService nilable.Nilable[string] `json:"kubernetesService"`
}

// GetName returns ServiceIntentsServiceIntentsIntentsOtterizeServiceIdentity.Name, and is useful for accessing the field via an interface.
func (v *ServiceIntentsServiceIntentsIntentsOtterizeServiceIdentity) GetName() string { return v.Name }

// GetNamespace returns ServiceIntentsServiceIntentsIntentsOtterizeServiceIdentity.Namespace, and is useful for accessing the field via an interface.
func (v *ServiceIntentsServiceIntentsIntentsOtterizeServiceIdentity) GetNamespace() string {
	return v.Namespace
}

// GetKubernetesService returns ServiceIntentsServiceIntentsIntentsOtterizeServiceIdentity.KubernetesService, and is useful for accessing the field via an interface.
func (v *ServiceIntentsServiceIntentsIntentsOtterizeServiceIdentity) GetKubernetesService() nilable.Nilable[string] {
	return v.KubernetesService
}

type SocketScanResults struct {
	Results []RecordedDestinationsForSrc `json:"results"`
}

// GetResults returns SocketScanResults.Results, and is useful for accessing the field via an interface.
func (v *SocketScanResults) GetResults() []RecordedDestinationsForSrc { return v.Results }

// __IntentsInput is used internally by genqlient
type __IntentsInput struct {
	Namespaces               []string              `json:"namespaces"`
	IncludeLabels            []string              `json:"includeLabels"`
	ExcludeServiceWithLabels []string              `json:"excludeServiceWithLabels"`
	IncludeAllLabels         nilable.Nilable[bool] `json:"includeAllLabels"`
	Server                   *ServerFilter         `json:"server"`
}

// GetNamespaces returns __IntentsInput.Namespaces, and is useful for accessing the field via an interface.
func (v *__IntentsInput) GetNamespaces() []string { return v.Namespaces }

// GetIncludeLabels returns __IntentsInput.IncludeLabels, and is useful for accessing the field via an interface.
func (v *__IntentsInput) GetIncludeLabels() []string { return v.IncludeLabels }

// GetExcludeServiceWithLabels returns __IntentsInput.ExcludeServiceWithLabels, and is useful for accessing the field via an interface.
func (v *__IntentsInput) GetExcludeServiceWithLabels() []string { return v.ExcludeServiceWithLabels }

// GetIncludeAllLabels returns __IntentsInput.IncludeAllLabels, and is useful for accessing the field via an interface.
func (v *__IntentsInput) GetIncludeAllLabels() nilable.Nilable[bool] { return v.IncludeAllLabels }

// GetServer returns __IntentsInput.Server, and is useful for accessing the field via an interface.
func (v *__IntentsInput) GetServer() *ServerFilter { return v.Server }

// __ReportCaptureResultsInput is used internally by genqlient
type __ReportCaptureResultsInput struct {
	Results CaptureResults `json:"results"`
}

// GetResults returns __ReportCaptureResultsInput.Results, and is useful for accessing the field via an interface.
func (v *__ReportCaptureResultsInput) GetResults() CaptureResults { return v.Results }

// __ReportSocketScanResultsInput is used internally by genqlient
type __ReportSocketScanResultsInput struct {
	Results SocketScanResults `json:"results"`
}

// GetResults returns __ReportSocketScanResultsInput.Results, and is useful for accessing the field via an interface.
func (v *__ReportSocketScanResultsInput) GetResults() SocketScanResults { return v.Results }

// __ReportTCPCaptureResultsInput is used internally by genqlient
type __ReportTCPCaptureResultsInput struct {
	Results CaptureTCPResults `json:"results"`
}

// GetResults returns __ReportTCPCaptureResultsInput.Results, and is useful for accessing the field via an interface.
func (v *__ReportTCPCaptureResultsInput) GetResults() CaptureTCPResults { return v.Results }

// __ServiceIntentsInput is used internally by genqlient
type __ServiceIntentsInput struct {
	Namespaces []string `json:"namespaces"`
}

// GetNamespaces returns __ServiceIntentsInput.Namespaces, and is useful for accessing the field via an interface.
func (v *__ServiceIntentsInput) GetNamespaces() []string { return v.Namespaces }

// The query or mutation executed by Intents.
const Intents_Operation = `
query Intents ($namespaces: [String!], $includeLabels: [String!], $excludeServiceWithLabels: [String!], $includeAllLabels: Boolean, $server: ServerFilter) {
	intents(namespaces: $namespaces, includeLabels: $includeLabels, excludeServiceWithLabels: $excludeServiceWithLabels, includeAllLabels: $includeAllLabels, server: $server) {
		client {
			name
			namespace
			podOwnerKind {
				group
				kind
				version
			}
		}
		server {
			name
			namespace
			podOwnerKind {
				group
				kind
				version
			}
			kubernetesService
		}
	}
}
`

func Intents(
	ctx_ context.Context,
	client_ graphql.Client,
	namespaces []string,
	includeLabels []string,
	excludeServiceWithLabels []string,
	includeAllLabels nilable.Nilable[bool],
	server *ServerFilter,
) (*IntentsResponse, error) {
	req_ := &graphql.Request{
		OpName: "Intents",
		Query:  Intents_Operation,
		Variables: &__IntentsInput{
			Namespaces:               namespaces,
			IncludeLabels:            includeLabels,
			ExcludeServiceWithLabels: excludeServiceWithLabels,
			IncludeAllLabels:         includeAllLabels,
			Server:                   server,
		},
	}
	var err_ error

	var data_ IntentsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by ReportCaptureResults.
const ReportCaptureResults_Operation = `
mutation ReportCaptureResults ($results: CaptureResults!) {
	reportCaptureResults(results: $results)
}
`

func ReportCaptureResults(
	ctx_ context.Context,
	client_ graphql.Client,
	results CaptureResults,
) (*ReportCaptureResultsResponse, error) {
	req_ := &graphql.Request{
		OpName: "ReportCaptureResults",
		Query:  ReportCaptureResults_Operation,
		Variables: &__ReportCaptureResultsInput{
			Results: results,
		},
	}
	var err_ error

	var data_ ReportCaptureResultsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by ReportSocketScanResults.
const ReportSocketScanResults_Operation = `
mutation ReportSocketScanResults ($results: SocketScanResults!) {
	reportSocketScanResults(results: $results)
}
`

func ReportSocketScanResults(
	ctx_ context.Context,
	client_ graphql.Client,
	results SocketScanResults,
) (*ReportSocketScanResultsResponse, error) {
	req_ := &graphql.Request{
		OpName: "ReportSocketScanResults",
		Query:  ReportSocketScanResults_Operation,
		Variables: &__ReportSocketScanResultsInput{
			Results: results,
		},
	}
	var err_ error

	var data_ ReportSocketScanResultsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by ReportTCPCaptureResults.
const ReportTCPCaptureResults_Operation = `
mutation ReportTCPCaptureResults ($results: CaptureTCPResults!) {
	reportTCPCaptureResults(results: $results)
}
`

func ReportTCPCaptureResults(
	ctx_ context.Context,
	client_ graphql.Client,
	results CaptureTCPResults,
) (*ReportTCPCaptureResultsResponse, error) {
	req_ := &graphql.Request{
		OpName: "ReportTCPCaptureResults",
		Query:  ReportTCPCaptureResults_Operation,
		Variables: &__ReportTCPCaptureResultsInput{
			Results: results,
		},
	}
	var err_ error

	var data_ ReportTCPCaptureResultsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by ServiceIntents.
const ServiceIntents_Operation = `
query ServiceIntents ($namespaces: [String!]) {
	serviceIntents(namespaces: $namespaces) {
		client {
			name
			namespace
			podOwnerKind {
				group
				kind
				version
			}
		}
		intents {
			name
			namespace
			kubernetesService
		}
	}
}
`

func ServiceIntents(
	ctx_ context.Context,
	client_ graphql.Client,
	namespaces []string,
) (*ServiceIntentsResponse, error) {
	req_ := &graphql.Request{
		OpName: "ServiceIntents",
		Query:  ServiceIntents_Operation,
		Variables: &__ServiceIntentsInput{
			Namespaces: namespaces,
		},
	}
	var err_ error

	var data_ ServiceIntentsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}
