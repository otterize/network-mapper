// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/resourcevisibility/svc_reconciler.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	model "github.com/otterize/network-mapper/src/mapper/pkg/graph/model"
	gomock "go.uber.org/mock/gomock"
	v1 "k8s.io/api/core/v1"
)

// MockKubeFinder is a mock of KubeFinder interface.
type MockKubeFinder struct {
	ctrl     *gomock.Controller
	recorder *MockKubeFinderMockRecorder
}

// MockKubeFinderMockRecorder is the mock recorder for MockKubeFinder.
type MockKubeFinderMockRecorder struct {
	mock *MockKubeFinder
}

// NewMockKubeFinder creates a new mock instance.
func NewMockKubeFinder(ctrl *gomock.Controller) *MockKubeFinder {
	mock := &MockKubeFinder{ctrl: ctrl}
	mock.recorder = &MockKubeFinderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKubeFinder) EXPECT() *MockKubeFinderMockRecorder {
	return m.recorder
}

// ResolveOtterizeIdentityForService mocks base method.
func (m *MockKubeFinder) ResolveOtterizeIdentityForService(ctx context.Context, service *v1.Service, now time.Time) (model.OtterizeServiceIdentity, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveOtterizeIdentityForService", ctx, service, now)
	ret0, _ := ret[0].(model.OtterizeServiceIdentity)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ResolveOtterizeIdentityForService indicates an expected call of ResolveOtterizeIdentityForService.
func (mr *MockKubeFinderMockRecorder) ResolveOtterizeIdentityForService(ctx, service, now interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveOtterizeIdentityForService", reflect.TypeOf((*MockKubeFinder)(nil).ResolveOtterizeIdentityForService), ctx, service, now)
}
