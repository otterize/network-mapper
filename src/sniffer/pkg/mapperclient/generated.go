// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package mapperclient

import (
	"context"
	"time"

	"github.com/Khan/genqlient/graphql"
)

type CaptureResults struct {
	Results []RecordedDestinationsForSrc `json:"results"`
}

// GetResults returns CaptureResults.Results, and is useful for accessing the field via an interface.
func (v *CaptureResults) GetResults() []RecordedDestinationsForSrc { return v.Results }

type Destination struct {
	Destination string    `json:"destination"`
	LastSeen    time.Time `json:"lastSeen"`
}

// GetDestination returns Destination.Destination, and is useful for accessing the field via an interface.
func (v *Destination) GetDestination() string { return v.Destination }

// GetLastSeen returns Destination.LastSeen, and is useful for accessing the field via an interface.
func (v *Destination) GetLastSeen() time.Time { return v.LastSeen }

type RecordedDestinationsForSrc struct {
	SrcIp        string        `json:"srcIp"`
	SrcHostname  string        `json:"srcHostname"`
	Destinations []Destination `json:"destinations"`
}

// GetSrcIp returns RecordedDestinationsForSrc.SrcIp, and is useful for accessing the field via an interface.
func (v *RecordedDestinationsForSrc) GetSrcIp() string { return v.SrcIp }

// GetSrcHostname returns RecordedDestinationsForSrc.SrcHostname, and is useful for accessing the field via an interface.
func (v *RecordedDestinationsForSrc) GetSrcHostname() string { return v.SrcHostname }

// GetDestinations returns RecordedDestinationsForSrc.Destinations, and is useful for accessing the field via an interface.
func (v *RecordedDestinationsForSrc) GetDestinations() []Destination { return v.Destinations }

type SocketScanResults struct {
	Results []RecordedDestinationsForSrc `json:"results"`
}

// GetResults returns SocketScanResults.Results, and is useful for accessing the field via an interface.
func (v *SocketScanResults) GetResults() []RecordedDestinationsForSrc { return v.Results }

// __reportCaptureResultsInput is used internally by genqlient
type __reportCaptureResultsInput struct {
	Results CaptureResults `json:"results"`
}

// GetResults returns __reportCaptureResultsInput.Results, and is useful for accessing the field via an interface.
func (v *__reportCaptureResultsInput) GetResults() CaptureResults { return v.Results }

// __reportSocketScanResultsInput is used internally by genqlient
type __reportSocketScanResultsInput struct {
	Results SocketScanResults `json:"results"`
}

// GetResults returns __reportSocketScanResultsInput.Results, and is useful for accessing the field via an interface.
func (v *__reportSocketScanResultsInput) GetResults() SocketScanResults { return v.Results }

// reportCaptureResultsResponse is returned by reportCaptureResults on success.
type reportCaptureResultsResponse struct {
	ReportCaptureResults bool `json:"reportCaptureResults"`
}

// GetReportCaptureResults returns reportCaptureResultsResponse.ReportCaptureResults, and is useful for accessing the field via an interface.
func (v *reportCaptureResultsResponse) GetReportCaptureResults() bool { return v.ReportCaptureResults }

// reportSocketScanResultsResponse is returned by reportSocketScanResults on success.
type reportSocketScanResultsResponse struct {
	ReportSocketScanResults bool `json:"reportSocketScanResults"`
}

// GetReportSocketScanResults returns reportSocketScanResultsResponse.ReportSocketScanResults, and is useful for accessing the field via an interface.
func (v *reportSocketScanResultsResponse) GetReportSocketScanResults() bool {
	return v.ReportSocketScanResults
}

func reportCaptureResults(
	ctx context.Context,
	client graphql.Client,
	results CaptureResults,
) (*reportCaptureResultsResponse, error) {
	req := &graphql.Request{
		OpName: "reportCaptureResults",
		Query: `
mutation reportCaptureResults ($results: CaptureResults!) {
	reportCaptureResults(results: $results)
}
`,
		Variables: &__reportCaptureResultsInput{
			Results: results,
		},
	}
	var err error

	var data reportCaptureResultsResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func reportSocketScanResults(
	ctx context.Context,
	client graphql.Client,
	results SocketScanResults,
) (*reportSocketScanResultsResponse, error) {
	req := &graphql.Request{
		OpName: "reportSocketScanResults",
		Query: `
mutation reportSocketScanResults ($results: SocketScanResults!) {
	reportSocketScanResults(results: $results)
}
`,
		Variables: &__reportSocketScanResultsInput{
			Results: results,
		},
	}
	var err error

	var data reportSocketScanResultsResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}
