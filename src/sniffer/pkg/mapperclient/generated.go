// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package mapperclient

import (
	"context"
	"time"

	"github.com/Khan/genqlient/graphql"
)

type CaptureResultForSrcIp struct {
	SrcIp        string        `json:"srcIp"`
	Destinations []Destination `json:"destinations"`
}

// GetSrcIp returns CaptureResultForSrcIp.SrcIp, and is useful for accessing the field via an interface.
func (v *CaptureResultForSrcIp) GetSrcIp() string { return v.SrcIp }

// GetDestinations returns CaptureResultForSrcIp.Destinations, and is useful for accessing the field via an interface.
func (v *CaptureResultForSrcIp) GetDestinations() []Destination { return v.Destinations }

type CaptureResults struct {
	Results []CaptureResultForSrcIp `json:"results"`
}

// GetResults returns CaptureResults.Results, and is useful for accessing the field via an interface.
func (v *CaptureResults) GetResults() []CaptureResultForSrcIp { return v.Results }

type Destination struct {
	Destination string    `json:"destination"`
	LastSeen    time.Time `json:"lastSeen"`
}

// GetDestination returns Destination.Destination, and is useful for accessing the field via an interface.
func (v *Destination) GetDestination() string { return v.Destination }

// GetLastSeen returns Destination.LastSeen, and is useful for accessing the field via an interface.
func (v *Destination) GetLastSeen() time.Time { return v.LastSeen }

type ResolvedCaptureResult struct {
	Src          ResolvedOtterizeServiceIdentityInput `json:"src"`
	Destinations []ResolvedDestination                `json:"destinations"`
}

// GetSrc returns ResolvedCaptureResult.Src, and is useful for accessing the field via an interface.
func (v *ResolvedCaptureResult) GetSrc() ResolvedOtterizeServiceIdentityInput { return v.Src }

// GetDestinations returns ResolvedCaptureResult.Destinations, and is useful for accessing the field via an interface.
func (v *ResolvedCaptureResult) GetDestinations() []ResolvedDestination { return v.Destinations }

type ResolvedDestination struct {
	Destination ResolvedOtterizeServiceIdentityInput `json:"destination"`
	LastSeen    time.Time                            `json:"lastSeen"`
}

// GetDestination returns ResolvedDestination.Destination, and is useful for accessing the field via an interface.
func (v *ResolvedDestination) GetDestination() ResolvedOtterizeServiceIdentityInput {
	return v.Destination
}

// GetLastSeen returns ResolvedDestination.LastSeen, and is useful for accessing the field via an interface.
func (v *ResolvedDestination) GetLastSeen() time.Time { return v.LastSeen }

type ResolvedOtterizeServiceIdentityInput struct {
	Name      string `json:"name"`
	Namespace string `json:"namespace"`
}

// GetName returns ResolvedOtterizeServiceIdentityInput.Name, and is useful for accessing the field via an interface.
func (v *ResolvedOtterizeServiceIdentityInput) GetName() string { return v.Name }

// GetNamespace returns ResolvedOtterizeServiceIdentityInput.Namespace, and is useful for accessing the field via an interface.
func (v *ResolvedOtterizeServiceIdentityInput) GetNamespace() string { return v.Namespace }

type ResolvedSocketScanResult struct {
	Src          ResolvedOtterizeServiceIdentityInput `json:"src"`
	Destinations []ResolvedDestination                `json:"destinations"`
}

// GetSrc returns ResolvedSocketScanResult.Src, and is useful for accessing the field via an interface.
func (v *ResolvedSocketScanResult) GetSrc() ResolvedOtterizeServiceIdentityInput { return v.Src }

// GetDestinations returns ResolvedSocketScanResult.Destinations, and is useful for accessing the field via an interface.
func (v *ResolvedSocketScanResult) GetDestinations() []ResolvedDestination { return v.Destinations }

type SocketScanResultForSrcIp struct {
	SrcIp   string        `json:"srcIp"`
	DestIps []Destination `json:"destIps"`
}

// GetSrcIp returns SocketScanResultForSrcIp.SrcIp, and is useful for accessing the field via an interface.
func (v *SocketScanResultForSrcIp) GetSrcIp() string { return v.SrcIp }

// GetDestIps returns SocketScanResultForSrcIp.DestIps, and is useful for accessing the field via an interface.
func (v *SocketScanResultForSrcIp) GetDestIps() []Destination { return v.DestIps }

type SocketScanResults struct {
	Results []SocketScanResultForSrcIp `json:"results"`
}

// GetResults returns SocketScanResults.Results, and is useful for accessing the field via an interface.
func (v *SocketScanResults) GetResults() []SocketScanResultForSrcIp { return v.Results }

// __reportCaptureResultsInput is used internally by genqlient
type __reportCaptureResultsInput struct {
	Results CaptureResults `json:"results"`
}

// GetResults returns __reportCaptureResultsInput.Results, and is useful for accessing the field via an interface.
func (v *__reportCaptureResultsInput) GetResults() CaptureResults { return v.Results }

// __reportResolvedCaptureResultsInput is used internally by genqlient
type __reportResolvedCaptureResultsInput struct {
	Results []ResolvedCaptureResult `json:"results"`
}

// GetResults returns __reportResolvedCaptureResultsInput.Results, and is useful for accessing the field via an interface.
func (v *__reportResolvedCaptureResultsInput) GetResults() []ResolvedCaptureResult { return v.Results }

// __reportResolvedSocketScanResultsInput is used internally by genqlient
type __reportResolvedSocketScanResultsInput struct {
	Results []ResolvedSocketScanResult `json:"results"`
}

// GetResults returns __reportResolvedSocketScanResultsInput.Results, and is useful for accessing the field via an interface.
func (v *__reportResolvedSocketScanResultsInput) GetResults() []ResolvedSocketScanResult {
	return v.Results
}

// __reportSocketScanResultsInput is used internally by genqlient
type __reportSocketScanResultsInput struct {
	Results SocketScanResults `json:"results"`
}

// GetResults returns __reportSocketScanResultsInput.Results, and is useful for accessing the field via an interface.
func (v *__reportSocketScanResultsInput) GetResults() SocketScanResults { return v.Results }

// reportCaptureResultsResponse is returned by reportCaptureResults on success.
type reportCaptureResultsResponse struct {
	ReportCaptureResults bool `json:"reportCaptureResults"`
}

// GetReportCaptureResults returns reportCaptureResultsResponse.ReportCaptureResults, and is useful for accessing the field via an interface.
func (v *reportCaptureResultsResponse) GetReportCaptureResults() bool { return v.ReportCaptureResults }

// reportResolvedCaptureResultsResponse is returned by reportResolvedCaptureResults on success.
type reportResolvedCaptureResultsResponse struct {
	ReportResolvedCaptureResults bool `json:"reportResolvedCaptureResults"`
}

// GetReportResolvedCaptureResults returns reportResolvedCaptureResultsResponse.ReportResolvedCaptureResults, and is useful for accessing the field via an interface.
func (v *reportResolvedCaptureResultsResponse) GetReportResolvedCaptureResults() bool {
	return v.ReportResolvedCaptureResults
}

// reportResolvedSocketScanResultsResponse is returned by reportResolvedSocketScanResults on success.
type reportResolvedSocketScanResultsResponse struct {
	ReportResolvedSocketScanResults bool `json:"reportResolvedSocketScanResults"`
}

// GetReportResolvedSocketScanResults returns reportResolvedSocketScanResultsResponse.ReportResolvedSocketScanResults, and is useful for accessing the field via an interface.
func (v *reportResolvedSocketScanResultsResponse) GetReportResolvedSocketScanResults() bool {
	return v.ReportResolvedSocketScanResults
}

// reportSocketScanResultsResponse is returned by reportSocketScanResults on success.
type reportSocketScanResultsResponse struct {
	ReportSocketScanResults bool `json:"reportSocketScanResults"`
}

// GetReportSocketScanResults returns reportSocketScanResultsResponse.ReportSocketScanResults, and is useful for accessing the field via an interface.
func (v *reportSocketScanResultsResponse) GetReportSocketScanResults() bool {
	return v.ReportSocketScanResults
}

func reportCaptureResults(
	ctx context.Context,
	client graphql.Client,
	results CaptureResults,
) (*reportCaptureResultsResponse, error) {
	req := &graphql.Request{
		OpName: "reportCaptureResults",
		Query: `
mutation reportCaptureResults ($results: CaptureResults!) {
	reportCaptureResults(results: $results)
}
`,
		Variables: &__reportCaptureResultsInput{
			Results: results,
		},
	}
	var err error

	var data reportCaptureResultsResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func reportResolvedCaptureResults(
	ctx context.Context,
	client graphql.Client,
	results []ResolvedCaptureResult,
) (*reportResolvedCaptureResultsResponse, error) {
	req := &graphql.Request{
		OpName: "reportResolvedCaptureResults",
		Query: `
mutation reportResolvedCaptureResults ($results: [ResolvedCaptureResult!]!) {
	reportResolvedCaptureResults(results: $results)
}
`,
		Variables: &__reportResolvedCaptureResultsInput{
			Results: results,
		},
	}
	var err error

	var data reportResolvedCaptureResultsResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func reportResolvedSocketScanResults(
	ctx context.Context,
	client graphql.Client,
	results []ResolvedSocketScanResult,
) (*reportResolvedSocketScanResultsResponse, error) {
	req := &graphql.Request{
		OpName: "reportResolvedSocketScanResults",
		Query: `
mutation reportResolvedSocketScanResults ($results: [ResolvedSocketScanResult!]!) {
	reportResolvedSocketScanResults(results: $results)
}
`,
		Variables: &__reportResolvedSocketScanResultsInput{
			Results: results,
		},
	}
	var err error

	var data reportResolvedSocketScanResultsResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func reportSocketScanResults(
	ctx context.Context,
	client graphql.Client,
	results SocketScanResults,
) (*reportSocketScanResultsResponse, error) {
	req := &graphql.Request{
		OpName: "reportSocketScanResults",
		Query: `
mutation reportSocketScanResults ($results: SocketScanResults!) {
	reportSocketScanResults(results: $results)
}
`,
		Variables: &__reportSocketScanResultsInput{
			Results: results,
		},
	}
	var err error

	var data reportSocketScanResultsResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}
