// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package mapperclient

import (
	"context"
	"time"

	"github.com/Khan/genqlient/graphql"
	"github.com/otterize/nilable"
)

type CaptureResults struct {
	Results []RecordedDestinationsForSrc `json:"results"`
}

// GetResults returns CaptureResults.Results, and is useful for accessing the field via an interface.
func (v *CaptureResults) GetResults() []RecordedDestinationsForSrc { return v.Results }

type CaptureTCPResults struct {
	Results []RecordedDestinationsForSrc `json:"results"`
}

// GetResults returns CaptureTCPResults.Results, and is useful for accessing the field via an interface.
func (v *CaptureTCPResults) GetResults() []RecordedDestinationsForSrc { return v.Results }

type Destination struct {
	Destination   string                  `json:"destination"`
	DestinationIP nilable.Nilable[string] `json:"destinationIP"`
	TTL           nilable.Nilable[int]    `json:"TTL"`
	LastSeen      time.Time               `json:"lastSeen"`
}

// GetDestination returns Destination.Destination, and is useful for accessing the field via an interface.
func (v *Destination) GetDestination() string { return v.Destination }

// GetDestinationIP returns Destination.DestinationIP, and is useful for accessing the field via an interface.
func (v *Destination) GetDestinationIP() nilable.Nilable[string] { return v.DestinationIP }

// GetTTL returns Destination.TTL, and is useful for accessing the field via an interface.
func (v *Destination) GetTTL() nilable.Nilable[int] { return v.TTL }

// GetLastSeen returns Destination.LastSeen, and is useful for accessing the field via an interface.
func (v *Destination) GetLastSeen() time.Time { return v.LastSeen }

// HealthResponse is returned by Health on success.
type HealthResponse struct {
	Health bool `json:"health"`
}

// GetHealth returns HealthResponse.Health, and is useful for accessing the field via an interface.
func (v *HealthResponse) GetHealth() bool { return v.Health }

type RecordedDestinationsForSrc struct {
	SrcIp        string        `json:"srcIp"`
	SrcHostname  string        `json:"srcHostname"`
	Destinations []Destination `json:"destinations"`
}

// GetSrcIp returns RecordedDestinationsForSrc.SrcIp, and is useful for accessing the field via an interface.
func (v *RecordedDestinationsForSrc) GetSrcIp() string { return v.SrcIp }

// GetSrcHostname returns RecordedDestinationsForSrc.SrcHostname, and is useful for accessing the field via an interface.
func (v *RecordedDestinationsForSrc) GetSrcHostname() string { return v.SrcHostname }

// GetDestinations returns RecordedDestinationsForSrc.Destinations, and is useful for accessing the field via an interface.
func (v *RecordedDestinationsForSrc) GetDestinations() []Destination { return v.Destinations }

type SocketScanResults struct {
	Results []RecordedDestinationsForSrc `json:"results"`
}

// GetResults returns SocketScanResults.Results, and is useful for accessing the field via an interface.
func (v *SocketScanResults) GetResults() []RecordedDestinationsForSrc { return v.Results }

// __reportCaptureResultsInput is used internally by genqlient
type __reportCaptureResultsInput struct {
	Results CaptureResults `json:"results"`
}

// GetResults returns __reportCaptureResultsInput.Results, and is useful for accessing the field via an interface.
func (v *__reportCaptureResultsInput) GetResults() CaptureResults { return v.Results }

// __reportSocketScanResultsInput is used internally by genqlient
type __reportSocketScanResultsInput struct {
	Results SocketScanResults `json:"results"`
}

// GetResults returns __reportSocketScanResultsInput.Results, and is useful for accessing the field via an interface.
func (v *__reportSocketScanResultsInput) GetResults() SocketScanResults { return v.Results }

// __reportTCPCaptureResultsInput is used internally by genqlient
type __reportTCPCaptureResultsInput struct {
	Results CaptureTCPResults `json:"results"`
}

// GetResults returns __reportTCPCaptureResultsInput.Results, and is useful for accessing the field via an interface.
func (v *__reportTCPCaptureResultsInput) GetResults() CaptureTCPResults { return v.Results }

// reportCaptureResultsResponse is returned by reportCaptureResults on success.
type reportCaptureResultsResponse struct {
	ReportCaptureResults bool `json:"reportCaptureResults"`
}

// GetReportCaptureResults returns reportCaptureResultsResponse.ReportCaptureResults, and is useful for accessing the field via an interface.
func (v *reportCaptureResultsResponse) GetReportCaptureResults() bool { return v.ReportCaptureResults }

// reportSocketScanResultsResponse is returned by reportSocketScanResults on success.
type reportSocketScanResultsResponse struct {
	ReportSocketScanResults bool `json:"reportSocketScanResults"`
}

// GetReportSocketScanResults returns reportSocketScanResultsResponse.ReportSocketScanResults, and is useful for accessing the field via an interface.
func (v *reportSocketScanResultsResponse) GetReportSocketScanResults() bool {
	return v.ReportSocketScanResults
}

// reportTCPCaptureResultsResponse is returned by reportTCPCaptureResults on success.
type reportTCPCaptureResultsResponse struct {
	ReportTCPCaptureResults bool `json:"reportTCPCaptureResults"`
}

// GetReportTCPCaptureResults returns reportTCPCaptureResultsResponse.ReportTCPCaptureResults, and is useful for accessing the field via an interface.
func (v *reportTCPCaptureResultsResponse) GetReportTCPCaptureResults() bool {
	return v.ReportTCPCaptureResults
}

// The query or mutation executed by Health.
const Health_Operation = `
query Health {
	health
}
`

func Health(
	ctx_ context.Context,
	client_ graphql.Client,
) (*HealthResponse, error) {
	req_ := &graphql.Request{
		OpName: "Health",
		Query:  Health_Operation,
	}
	var err_ error

	var data_ HealthResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by reportCaptureResults.
const reportCaptureResults_Operation = `
mutation reportCaptureResults ($results: CaptureResults!) {
	reportCaptureResults(results: $results)
}
`

func reportCaptureResults(
	ctx_ context.Context,
	client_ graphql.Client,
	results CaptureResults,
) (*reportCaptureResultsResponse, error) {
	req_ := &graphql.Request{
		OpName: "reportCaptureResults",
		Query:  reportCaptureResults_Operation,
		Variables: &__reportCaptureResultsInput{
			Results: results,
		},
	}
	var err_ error

	var data_ reportCaptureResultsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by reportSocketScanResults.
const reportSocketScanResults_Operation = `
mutation reportSocketScanResults ($results: SocketScanResults!) {
	reportSocketScanResults(results: $results)
}
`

func reportSocketScanResults(
	ctx_ context.Context,
	client_ graphql.Client,
	results SocketScanResults,
) (*reportSocketScanResultsResponse, error) {
	req_ := &graphql.Request{
		OpName: "reportSocketScanResults",
		Query:  reportSocketScanResults_Operation,
		Variables: &__reportSocketScanResultsInput{
			Results: results,
		},
	}
	var err_ error

	var data_ reportSocketScanResultsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by reportTCPCaptureResults.
const reportTCPCaptureResults_Operation = `
mutation reportTCPCaptureResults ($results: CaptureTCPResults!) {
	reportTCPCaptureResults(results: $results)
}
`

func reportTCPCaptureResults(
	ctx_ context.Context,
	client_ graphql.Client,
	results CaptureTCPResults,
) (*reportTCPCaptureResultsResponse, error) {
	req_ := &graphql.Request{
		OpName: "reportTCPCaptureResults",
		Query:  reportTCPCaptureResults_Operation,
		Variables: &__reportTCPCaptureResultsInput{
			Results: results,
		},
	}
	var err_ error

	var data_ reportTCPCaptureResultsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}
