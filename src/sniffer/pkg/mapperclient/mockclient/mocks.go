// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package mock_mapperclient is a generated GoMock package.
package mock_mapperclient

import (
	context "context"
	reflect "reflect"

	"go.uber.org/mock/gomock"
	mapperclient "github.com/otterize/network-mapper/src/sniffer/pkg/mapperclient"
)

// MockMapperClient is a mock of MapperClient interface.
type MockMapperClient struct {
	ctrl     *gomock.Controller
	recorder *MockMapperClientMockRecorder
}

// MockMapperClientMockRecorder is the mock recorder for MockMapperClient.
type MockMapperClientMockRecorder struct {
	mock *MockMapperClient
}

// NewMockMapperClient creates a new mock instance.
func NewMockMapperClient(ctrl *gomock.Controller) *MockMapperClient {
	mock := &MockMapperClient{ctrl: ctrl}
	mock.recorder = &MockMapperClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMapperClient) EXPECT() *MockMapperClientMockRecorder {
	return m.recorder
}

// Health mocks base method.
func (m *MockMapperClient) Health(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Health", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Health indicates an expected call of Health.
func (mr *MockMapperClientMockRecorder) Health(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Health", reflect.TypeOf((*MockMapperClient)(nil).Health), ctx)
}

// ReportCaptureResults mocks base method.
func (m *MockMapperClient) ReportCaptureResults(ctx context.Context, results mapperclient.CaptureResults) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReportCaptureResults", ctx, results)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReportCaptureResults indicates an expected call of ReportCaptureResults.
func (mr *MockMapperClientMockRecorder) ReportCaptureResults(ctx, results interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportCaptureResults", reflect.TypeOf((*MockMapperClient)(nil).ReportCaptureResults), ctx, results)
}

// ReportSocketScanResults mocks base method.
func (m *MockMapperClient) ReportSocketScanResults(ctx context.Context, results mapperclient.SocketScanResults) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReportSocketScanResults", ctx, results)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReportSocketScanResults indicates an expected call of ReportSocketScanResults.
func (mr *MockMapperClientMockRecorder) ReportSocketScanResults(ctx, results interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportSocketScanResults", reflect.TypeOf((*MockMapperClient)(nil).ReportSocketScanResults), ctx, results)
}

// ReportTCPCaptureResults mocks base method.
func (m *MockMapperClient) ReportTCPCaptureResults(ctx context.Context, results mapperclient.CaptureTCPResults) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReportTCPCaptureResults", ctx, results)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReportTCPCaptureResults indicates an expected call of ReportTCPCaptureResults.
func (mr *MockMapperClientMockRecorder) ReportTCPCaptureResults(ctx, results interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportTCPCaptureResults", reflect.TypeOf((*MockMapperClient)(nil).ReportTCPCaptureResults), ctx, results)
}
