// Code generated by MockGen. DO NOT EDIT.
// Source: ./ipresolver.go

// Package ipresolvermocks is a generated GoMock package.
package ipresolvermocks

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	ipresolver "github.com/otterize/network-mapper/src/sniffer/pkg/ipresolver"
)

// MockIpResolver is a mock of IpResolver interface.
type MockIpResolver struct {
	ctrl     *gomock.Controller
	recorder *MockIpResolverMockRecorder
}

// MockIpResolverMockRecorder is the mock recorder for MockIpResolver.
type MockIpResolverMockRecorder struct {
	mock *MockIpResolver
}

// NewMockIpResolver creates a new mock instance.
func NewMockIpResolver(ctrl *gomock.Controller) *MockIpResolver {
	mock := &MockIpResolver{ctrl: ctrl}
	mock.recorder = &MockIpResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIpResolver) EXPECT() *MockIpResolverMockRecorder {
	return m.recorder
}

// ResolveDNS mocks base method.
func (m *MockIpResolver) ResolveDNS(dns string, captureTime time.Time) (ipresolver.Identity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveDNS", dns, captureTime)
	ret0, _ := ret[0].(ipresolver.Identity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveDNS indicates an expected call of ResolveDNS.
func (mr *MockIpResolverMockRecorder) ResolveDNS(dns, captureTime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveDNS", reflect.TypeOf((*MockIpResolver)(nil).ResolveDNS), dns, captureTime)
}

// ResolveIp mocks base method.
func (m *MockIpResolver) ResolveIp(ip string, captureTime time.Time) (ipresolver.Identity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveIp", ip, captureTime)
	ret0, _ := ret[0].(ipresolver.Identity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveIp indicates an expected call of ResolveIp.
func (mr *MockIpResolverMockRecorder) ResolveIp(ip, captureTime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveIp", reflect.TypeOf((*MockIpResolver)(nil).ResolveIp), ip, captureTime)
}
