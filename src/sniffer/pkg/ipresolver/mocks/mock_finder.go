// Code generated by MockGen. DO NOT EDIT.
// Source: ./ipresolver.go

// Package ipresolvermocks is a generated GoMock package.
package ipresolvermocks

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	ipresolver "github.com/otterize/network-mapper/src/sniffer/pkg/ipresolver"
)

// MockPodResolver is a mock of PodResolver interface.
type MockPodResolver struct {
	ctrl     *gomock.Controller
	recorder *MockPodResolverMockRecorder
}

// MockPodResolverMockRecorder is the mock recorder for MockPodResolver.
type MockPodResolverMockRecorder struct {
	mock *MockPodResolver
}

// NewMockPodResolver creates a new mock instance.
func NewMockPodResolver(ctrl *gomock.Controller) *MockPodResolver {
	mock := &MockPodResolver{ctrl: ctrl}
	mock.recorder = &MockPodResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPodResolver) EXPECT() *MockPodResolverMockRecorder {
	return m.recorder
}

// ResolveDNS mocks base method.
func (m *MockPodResolver) ResolveDNS(dns ipresolver.DestDNS, captureTime time.Time) (ipresolver.Identity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveDNS", dns, captureTime)
	ret0, _ := ret[0].(ipresolver.Identity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveDNS indicates an expected call of ResolveDNS.
func (mr *MockPodResolverMockRecorder) ResolveDNS(dns, captureTime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveDNS", reflect.TypeOf((*MockPodResolver)(nil).ResolveDNS), dns, captureTime)
}

// ResolveIP mocks base method.
func (m *MockPodResolver) ResolveIP(ip ipresolver.PodIP, captureTime time.Time) (ipresolver.Identity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveIP", ip, captureTime)
	ret0, _ := ret[0].(ipresolver.Identity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveIP indicates an expected call of ResolveIP.
func (mr *MockPodResolverMockRecorder) ResolveIP(ip, captureTime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveIP", reflect.TypeOf((*MockPodResolver)(nil).ResolveIP), ip, captureTime)
}

// WaitForUpdateTime mocks base method.
func (m *MockPodResolver) WaitForUpdateTime(ctx context.Context, updateTime time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitForUpdateTime", ctx, updateTime)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitForUpdateTime indicates an expected call of WaitForUpdateTime.
func (mr *MockPodResolverMockRecorder) WaitForUpdateTime(ctx, updateTime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForUpdateTime", reflect.TypeOf((*MockPodResolver)(nil).WaitForUpdateTime), ctx, updateTime)
}
