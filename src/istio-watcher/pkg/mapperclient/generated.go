// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package mapperclient

import (
	"context"
	"time"

	"github.com/Khan/genqlient/graphql"
)

// HealthResponse is returned by Health on success.
type HealthResponse struct {
	Health bool `json:"health"`
}

// GetHealth returns HealthResponse.Health, and is useful for accessing the field via an interface.
func (v *HealthResponse) GetHealth() bool { return v.Health }

type HttpMethod string

const (
	HttpMethodGet     HttpMethod = "GET"
	HttpMethodPost    HttpMethod = "POST"
	HttpMethodPut     HttpMethod = "PUT"
	HttpMethodDelete  HttpMethod = "DELETE"
	HttpMethodOptions HttpMethod = "OPTIONS"
	HttpMethodTrace   HttpMethod = "TRACE"
	HttpMethodPatch   HttpMethod = "PATCH"
	HttpMethodConnect HttpMethod = "CONNECT"
	HttpMethodAll     HttpMethod = "ALL"
)

type IstioConnection struct {
	SrcWorkload          string       `json:"srcWorkload"`
	SrcWorkloadNamespace string       `json:"srcWorkloadNamespace"`
	DstWorkload          string       `json:"dstWorkload"`
	DstWorkloadNamespace string       `json:"dstWorkloadNamespace"`
	Path                 string       `json:"path"`
	Methods              []HttpMethod `json:"methods"`
	LastSeen             time.Time    `json:"lastSeen"`
}

// GetSrcWorkload returns IstioConnection.SrcWorkload, and is useful for accessing the field via an interface.
func (v *IstioConnection) GetSrcWorkload() string { return v.SrcWorkload }

// GetSrcWorkloadNamespace returns IstioConnection.SrcWorkloadNamespace, and is useful for accessing the field via an interface.
func (v *IstioConnection) GetSrcWorkloadNamespace() string { return v.SrcWorkloadNamespace }

// GetDstWorkload returns IstioConnection.DstWorkload, and is useful for accessing the field via an interface.
func (v *IstioConnection) GetDstWorkload() string { return v.DstWorkload }

// GetDstWorkloadNamespace returns IstioConnection.DstWorkloadNamespace, and is useful for accessing the field via an interface.
func (v *IstioConnection) GetDstWorkloadNamespace() string { return v.DstWorkloadNamespace }

// GetPath returns IstioConnection.Path, and is useful for accessing the field via an interface.
func (v *IstioConnection) GetPath() string { return v.Path }

// GetMethods returns IstioConnection.Methods, and is useful for accessing the field via an interface.
func (v *IstioConnection) GetMethods() []HttpMethod { return v.Methods }

// GetLastSeen returns IstioConnection.LastSeen, and is useful for accessing the field via an interface.
func (v *IstioConnection) GetLastSeen() time.Time { return v.LastSeen }

type IstioConnectionResults struct {
	Results []IstioConnection `json:"results"`
}

// GetResults returns IstioConnectionResults.Results, and is useful for accessing the field via an interface.
func (v *IstioConnectionResults) GetResults() []IstioConnection { return v.Results }

// __reportIstioConnectionsInput is used internally by genqlient
type __reportIstioConnectionsInput struct {
	Results IstioConnectionResults `json:"results"`
}

// GetResults returns __reportIstioConnectionsInput.Results, and is useful for accessing the field via an interface.
func (v *__reportIstioConnectionsInput) GetResults() IstioConnectionResults { return v.Results }

// reportIstioConnectionsResponse is returned by reportIstioConnections on success.
type reportIstioConnectionsResponse struct {
	ReportIstioConnectionResults bool `json:"reportIstioConnectionResults"`
}

// GetReportIstioConnectionResults returns reportIstioConnectionsResponse.ReportIstioConnectionResults, and is useful for accessing the field via an interface.
func (v *reportIstioConnectionsResponse) GetReportIstioConnectionResults() bool {
	return v.ReportIstioConnectionResults
}

// The query or mutation executed by Health.
const Health_Operation = `
query Health {
	health
}
`

func Health(
	ctx_ context.Context,
	client_ graphql.Client,
) (*HealthResponse, error) {
	req_ := &graphql.Request{
		OpName: "Health",
		Query:  Health_Operation,
	}
	var err_ error

	var data_ HealthResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by reportIstioConnections.
const reportIstioConnections_Operation = `
mutation reportIstioConnections ($results: IstioConnectionResults!) {
	reportIstioConnectionResults(results: $results)
}
`

func reportIstioConnections(
	ctx_ context.Context,
	client_ graphql.Client,
	results IstioConnectionResults,
) (*reportIstioConnectionsResponse, error) {
	req_ := &graphql.Request{
		OpName: "reportIstioConnections",
		Query:  reportIstioConnections_Operation,
		Variables: &__reportIstioConnectionsInput{
			Results: results,
		},
	}
	var err_ error

	var data_ reportIstioConnectionsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}
