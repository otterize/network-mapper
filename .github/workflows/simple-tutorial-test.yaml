name: Simple Tutorial Test
on:
  workflow_call: # To support triggering from another workflow (build.yaml)
    # When triggering a workflow from another workflow the triggered workflow does not have access to any secrets,
    # and they must be passed from the caller
    secrets:
      OTTERIZEBOT_GITHUB_TOKEN:
        required: true
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      DOCKER_PASSWORD:
        required: true

    inputs:
      mapper-tag:
        required: true
        type: string
      sniffer-tag:
        required: true
        type: string


env:
  REGISTRY: 353146681200.dkr.ecr.us-east-1.amazonaws.com
  REPOSITORY_NAME: otterize


jobs:
  tutorial-flows-test:
    timeout-minutes: 5
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive
          token: ${{ secrets.OTTERIZEBOT_GITHUB_TOKEN }} # required for checking out submodules

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: otterize
          password: ${{ secrets.DOCKER_PASSWORD }}


      - name: Set up Helm
        uses: azure/setup-helm@v3

      - name: Start minikube
        uses: medyagh/setup-minikube@master
        with:
          start-args: "--network-plugin=cni"

      - name: Setup Calico
        run: |-
          kubectl apply -f https://raw.githubusercontent.com/projectcalico/calico/v3.24.1/manifests/calico.yaml
      - name: Wait for Calico startup
        run: |-
          kubectl wait pods -n kube-system -l k8s-app=calico-kube-controllers --for condition=Ready --timeout=90s
          kubectl wait pods -n kube-system -l k8s-app=calico-node --for condition=Ready --timeout=90s
          kubectl wait pods -n kube-system -l k8s-app=calico-kube-controllers --for condition=Ready --timeout=90s

      - name: Deploy Network Mapper
        run: |-
          docker pull ${{ env.REGISTRY }}/${{ env.REPOSITORY_NAME }}:${{ inputs.mapper-tag }}
          minikube image load ${{ env.REGISTRY }}/${{ env.REPOSITORY_NAME }}:${{ inputs.mapper-tag }}
          docker pull ${{ env.REGISTRY }}/${{ env.REPOSITORY_NAME }}:${{ inputs.sniffer-tag }}
          minikube image load  ${{ env.REGISTRY }}/${{ env.REPOSITORY_NAME }}:${{ inputs.sniffer-tag }}
          
          MAPPER_FLAGS="--set-string networkMapper.mapper.repository=${{ env.REGISTRY }} --set-string networkMapper.mapper.image=${{ env.REPOSITORY_NAME }} --set-string networkMapper.mapper.tag=${{ inputs.mapper-tag }} --set-string networkMapper.mapper.pullPolicy=Never"
          SNIFFER_FLAGS="--set-string networkMapper.sniffer.repository=${{ env.REGISTRY }} --set-string networkMapper.sniffer.image=${{ env.REPOSITORY_NAME }} --set-string networkMapper.sniffer.tag=${{ inputs.sniffer-tag }} --set-string networkMapper.sniffer.pullPolicy=Never"
          helm dep up ./helm-charts/otterize-kubernetes
          helm install otterize ./helm-charts/otterize-kubernetes -n otterize-system --create-namespace $MAPPER_FLAGS $SNIFFER_FLAGS

      - name: Install CLI
        run: |-
          wget https://get-test.otterize.com/otterize-cli/v0.1.20/otterize_Linux_x86_64.tar.gz
          tar xf otterize_Linux_x86_64.tar.gz
          sudo cp otterize /usr/local/bin

      - name: Deploy Tutorial services
        run: |-
          kubectl apply -n otterize-tutorial-mapper -f https://docs.otterize.com/code-examples/network-mapper/all.yaml

      - name: Wait for Otterize
        run: |-
          kubectl wait pods -n otterize-system -l app=otterize-network-sniffer --for condition=Ready --timeout=90s
          kubectl wait pods -n otterize-system -l app=otterize-network-mapper --for condition=Ready --timeout=90s

      - name: Wait for Tutorial services
        run: |-
          kubectl wait pods -n otterize-tutorial-mapper -l app=client --for condition=Ready --timeout=90s
          kubectl wait pods -n otterize-tutorial-mapper -l app=client2 --for condition=Ready --timeout=90s
          kubectl wait pods -n otterize-tutorial-mapper -l app=server --for condition=Ready --timeout=90s

      - name: Test Policy Export
        run: |-
          # sleep 10 seconds which is the report interval from the sniffer to the mapper
          sleep 10
          otterize network-mapper export -n otterize-tutorial-mapper --format=json | jq 'sort_by(.metadata.namespace + .metadata.name)'
          otterize network-mapper export -n otterize-tutorial-mapper --format=json | jq 'sort_by(.metadata.namespace + .metadata.name)' > /tmp/intents.json
          diff .github/workflows/tutorial-tests-expected-results/simple-tutorial-intents.json /tmp/intents.json 
          
      
      

      
