name: E2E Test # this test is based on this tutorial: https://docs.otterize.com/quick-tutorials/k8s-network-mapper
on:
  workflow_call: # To support triggering from another workflow (build.yaml)
    # When triggering a workflow from another workflow the triggered workflow does not have access to any secrets,
    # and they must be passed from the caller
    secrets:
      OTTERIZEBOT_GITHUB_TOKEN:
        required: true
      B64_GCLOUD_SERVICE_ACCOUNT_JSON:
        required: true

    inputs:
      mapper-tag:
        required: true
        type: string
      sniffer-tag:
        required: true
        type: string


env:
  REGISTRY: us-central1-docker.pkg.dev/main-383408/otterize
  REPOSITORY_NAME: otterize


jobs:
  e2e-test:
    timeout-minutes: 5
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive
          token: ${{ secrets.OTTERIZEBOT_GITHUB_TOKEN }} # required for checking out submodules

      - name: Login to GCR
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: _json_key_base64
          password: ${{ secrets.B64_GCLOUD_SERVICE_ACCOUNT_JSON}}

      - name: Set up Helm
        uses: azure/setup-helm@v3

      - name: Start minikube
        uses: medyagh/setup-minikube@master
        with:
          start-args: "--network-plugin=cni --cni=calico"

      - name: Wait for Calico startup
        run: |-
          kubectl wait pods -n kube-system -l k8s-app=calico-kube-controllers --for condition=Ready --timeout=90s
          kubectl wait pods -n kube-system -l k8s-app=calico-node --for condition=Ready --timeout=90s
          kubectl wait pods -n kube-system -l k8s-app=calico-kube-controllers --for condition=Ready --timeout=90s

      - name: Deploy Network Mapper
        run: |-
          docker pull ${{ env.REGISTRY }}/${{ inputs.mapper-tag }}
          minikube image load ${{ env.REGISTRY }}/${{ inputs.mapper-tag }}
          docker pull ${{ env.REGISTRY }}/${{ inputs.sniffer-tag }}
          minikube image load  ${{ env.REGISTRY }}/${{ inputs.sniffer-tag }}
          
          MAPPER_FLAGS="--set-string networkMapper.mapper.repository=${{ env.REGISTRY }} --set-string networkMapper.mapper.image=${{ env.REPOSITORY_NAME }} --set-string networkMapper.mapper.tag=${{ inputs.mapper-tag }} --set-string networkMapper.mapper.pullPolicy=Never"
          SNIFFER_FLAGS="--set-string networkMapper.sniffer.repository=${{ env.REGISTRY }} --set-string networkMapper.sniffer.image=${{ env.REPOSITORY_NAME }} --set-string networkMapper.sniffer.tag=${{ inputs.sniffer-tag }} --set-string networkMapper.sniffer.pullPolicy=Never"
          helm dep up ./helm-charts/otterize-kubernetes
          helm install otterize ./helm-charts/otterize-kubernetes -n otterize-system --create-namespace $MAPPER_FLAGS $SNIFFER_FLAGS

      - name: Install CLI
        run: |-
          wget https://get.otterize.com/otterize-cli/v0.1.22/otterize_Linux_x86_64.tar.gz
          tar xf otterize_Linux_x86_64.tar.gz
          sudo cp otterize /usr/local/bin

      - name: Deploy Tutorial services
        run: |-
          kubectl apply -n otterize-tutorial-mapper -f https://docs.otterize.com/code-examples/network-mapper/all.yaml

      - name: Wait for Otterize
        run: |-
          kubectl wait pods -n otterize-system -l app=otterize-network-sniffer --for condition=Ready --timeout=90s
          kubectl wait pods -n otterize-system -l app=otterize-network-mapper --for condition=Ready --timeout=90s

      - name: Wait for Tutorial services
        run: |-
          kubectl wait pods -n otterize-tutorial-mapper -l app=client --for condition=Ready --timeout=90s
          kubectl wait pods -n otterize-tutorial-mapper -l app=client2 --for condition=Ready --timeout=90s
          kubectl wait pods -n otterize-tutorial-mapper -l app=server --for condition=Ready --timeout=90s

      - name: Test Policy Export
        run: |-
          # wait for 2 intents to be discovered with timeout of 30 seconds. 
          # sleeps 10 because this is the report interval from the watcher to the mapper
          for i in 1 2 3
          do
            if [ `otterize network-mapper export -n otterize-tutorial-mapper --format=json | jq ". | length"` != 2 ]; then echo "wait for discovered intents"; sleep 10 ; fi
          done
          
          echo "export intents and compare to expected file" 
          otterize network-mapper export -n otterize-tutorial-mapper --format=json | jq 'sort_by(.metadata.namespace + .metadata.name)' > /tmp/intents.json
          diff .github/workflows/tests-expected-results/simple-tutorial-intents.json /tmp/intents.json 
          
      
      

      
