name: E2E Test # this test is based on this tutorial: https://docs.otterize.com/quick-tutorials/k8s-network-mapper
on:
  workflow_call: # To support triggering from another workflow (build.yaml)
    # When triggering a workflow from another workflow the triggered workflow does not have access to any secrets,
    # and they must be passed from the caller
    secrets:
      B64_GCLOUD_SERVICE_ACCOUNT_JSON:
        required: false

    inputs:
      mapper-tag:
        required: true
        type: string
      sniffer-tag:
        required: true
        type: string
      mapper-image:
        required: true
        type: string
      sniffer-image:
        required: true
        type: string
      registry:
        required: true
        type: string
        default: us-central1-docker.pkg.dev/main-383408/otterize


env:
  REGISTRY: ${{ inputs.registry }}

jobs:
  e2e-test:
    timeout-minutes: 5
    strategy:
      matrix:
        workers: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Login to GCR # We don't want this to happen in the setup, since we don't want to pass the SA account secret to the setupGCR
        if: (github.event_name == 'push' && github.repository == 'otterize/network-mapper') || github.event.pull_request.head.repo.full_name == 'otterize/network-mapper'
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: _json_key_base64
          password: ${{ secrets.B64_GCLOUD_SERVICE_ACCOUNT_JSON }}

      - name: Test setup
        uses: ./.github/actions/e2e-test-setup-action
        with:
          mapper-tag: ${{ inputs.mapper-tag }}
          sniffer-tag: ${{ inputs.sniffer-tag }}
          mapper-image: ${{ inputs.mapper-image }}
          sniffer-image: ${{ inputs.sniffer-image }}
          registry: ${{ inputs.registry }}

      - name: Install CLI
        run: |-
          wget --header="X-Otterize-Test: true" https://get.otterize.com/otterize-cli/v0.1.30/otterize_linux_x86_64.tar.gz
          tar xf otterize_linux_x86_64.tar.gz
          sudo cp otterize /usr/local/bin

      - name: Deploy Tutorial services
        run: |-
          kubectl apply -n otterize-tutorial-mapper -f https://docs.otterize.com/code-examples/network-mapper/all.yaml

      - name: Wait for Tutorial services
        run: |-
          kubectl wait pods -n otterize-tutorial-mapper -l app=client --for condition=Ready --timeout=90s
          kubectl wait pods -n otterize-tutorial-mapper -l app=client2 --for condition=Ready --timeout=90s
          kubectl wait pods -n otterize-tutorial-mapper -l app=server --for condition=Ready --timeout=90s

      - name: Test Policy Export
        run: |-

          # wait for 2 intents to be discovered with timeout of 30 seconds. 
          # sleeps 10 because this is the report interval from the watcher to the mapper
          for i in {1..5}
          do
            if [ `otterize network-mapper export --telemetry-enabled=false -n otterize-tutorial-mapper --format=json | jq ". | length"` != 2 ]; then
          echo "wait for discovered intents";
          echo _SNIFFER LOGS_
          kubectl logs --since=15s -n otterize-system -l app=otterize-network-sniffer
          echo _MAPPER LOGS_
          kubectl logs --since=15s -n otterize-system -l app=otterize-network-mapper
          sleep 10 ;
          fi
          done
          
          echo Outputting all logs
          echo _SNIFFER LOGS_
          kubectl logs -n otterize-system -l app=otterize-network-sniffer --tail=-1
          echo _MAPPER LOGS_
          kubectl logs -n otterize-system -l app=otterize-network-mapper --tail=-1
          
          echo "export intents and compare to expected file" 
          otterize network-mapper export --telemetry-enabled=false -n otterize-tutorial-mapper --format=json | jq 'sort_by(.metadata.namespace + .metadata.name)' > /tmp/intents.json
          diff .github/workflows/tests-expected-results/simple-tutorial-intents.json /tmp/intents.json 
          echo "expected" && cat .github/workflows/tests-expected-results/simple-tutorial-intents.json
          echo "actual" && cat /tmp/intents.json
